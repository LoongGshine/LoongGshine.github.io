[{"categories":["Git"],"content":"Git 中文教学 新手入门推荐，对于 Git 的入门操作讲解十分友好。 视频地址 学习记录 ","date":"2024-01-04","objectID":"/git/git/:1:0","tags":["Git"],"title":"Git/GitHub 学习导航","uri":"/git/git/"},{"categories":["Git"],"content":"Git 基本原理 对 Git 原理介绍比较准确，UP 主其它关于 GitHub 的合集也比较推荐。 视频地址 学习记录 ","date":"2024-01-04","objectID":"/git/git/:2:0","tags":["Git"],"title":"Git/GitHub 学习导航","uri":"/git/git/"},{"categories":["Git"],"content":"Learn Git Branching 交互性学习 Git 的网站，可以边玩边学 Git 操作，趣味性 MAX（来自 THUer 的推荐）。 网站地址 学习记录 ","date":"2024-01-04","objectID":"/git/git/:3:0","tags":["Git"],"title":"Git/GitHub 学习导航","uri":"/git/git/"},{"categories":["Git"],"content":"ugit 动手造一个 Mini Git，锻炼代码能力和加深原理理解。建议初步理解 Git 原理后再来挑战这个轮子。 仓库地址 教程地址 ","date":"2024-01-04","objectID":"/git/git/:4:0","tags":["Git"],"title":"Git/GitHub 学习导航","uri":"/git/git/"},{"categories":["Git"],"content":"References 知乎: 动手学习GIT - 最好学习GIT的方式是从零开始做一个 ","date":"2024-01-04","objectID":"/git/git/:5:0","tags":["Git"],"title":"Git/GitHub 学习导航","uri":"/git/git/"},{"categories":["Network"],"content":"清大开放式课程 - 计算机网络 课程主页 课程资料 课程视频 ","date":"2024-01-02","objectID":"/network/network/:1:0","tags":["Network"],"title":"计算机网络学习导航","uri":"/network/network/"},{"categories":["Network"],"content":"Referenecs 110-1 計算機網路 (清大開放式課程) ","date":"2024-01-02","objectID":"/network/network/:2:0","tags":["Network"],"title":"计算机网络学习导航","uri":"/network/network/"},{"categories":["LKI"],"content":"人們對數學的加減運算可輕易在腦中辨識符號並理解其結果，但電腦做任何事都受限於實體資料儲存及操作方式，換言之，電腦硬體實際只認得 0 和 1，卻不知道符號 + 和 - 在數學及應用場域的意義，於是工程人員引入「補數」以便在二進位系統中，表達人們認知上的正負數。但您有沒有想過，為何「二補數」(2’s complement) 被電腦廣泛採用呢？背後的設計考量又是什麼？本文嘗試從數學觀點去解讀編碼背後的原理，並佐以資訊安全及程式碼最佳化的考量，探討二補數這樣的編碼對於程式設計有何關鍵影響。 ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:0:0","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"一补数 (Ones’ complement) ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:1:0","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"9 的补数 ❌ 科普短片: Not just counting, but saving lives: Curta ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:1:1","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"运算原理 注意\r以一补数编码形式表示的运算子，在参与运算后，运算结果符合一补数的编码： $$\r[X]_{一补数} + [Y]_{一补数} = [X+Y]_{一补数}\r$$\r接下来进行分类讨论，以 32-bit 正数 $X$, $Y$ 为例： $X + Y = X + Y$ 显然运算子和运算结果都满足一补数编码。 $X - Y = X + (2^{32} - 1 - Y)$ 如果 $X \u003e Y$，则运算结果应为 $X - Y$ 且为正数，其一补数编码为 $X - Y$。而此时 $$ 2^{32} - 1 + X - Y $$ 显然会溢出，为了使运算结果对应一补数编码，所以此时循环进位对应 $+\\ (1 - 2_{32})$。 如果 $X \u003c Y$，则运算结果应为 $X - Y$ 且为负数，其一补数编码为 $$ 2^{32} - 1 - （Y - X） = 2_{32} - 1 - X - Y $$ 而此时 $2^{32} - 1 + X - Y$ 并不会溢出，并且满足运算结果的一补数编码，所以无需进行循环进位。 如果 $X = Y$，显然 $$ X - Y = X + 2^{32} - 1 - Y = 2^{32} - 1 $$ 为 0 成立。 $-X - Y = (2^{32} - 1 - X) + (2^{32} - 1 - Y)$，显然会导致溢出。而 $-X - Y$ 的一补数编码为 $$ 2^{32} - 1 - (X + Y) = 2^{32} - 1 - X - Y $$ 所以需要在溢出时循环进位 $+\\ (1 - 2^{32})$ 来消除运算结果中的一个 $2^{32} - 1$。 ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:1:2","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"二补数 (Two’s complement) ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:2:0","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"正负数编码表示 假设有 n-bit 的二补数编码 $A$，$-A$ 的推导如下： 格式一： $$\r\\begin{align*}\rA + \\neg A \u0026= 2^n - 1 \\\\\rA + \\neg A + 1 \u0026\\equiv 0 \\equiv 2^n \\ (\\bmod 2^n) \\\\\r-A \u0026= \\neg A + 1 \\\\ \\end{align*}\r$$\r格式二： $$\r\\begin{align*}\rA + \\neg A \u0026= 2^n - 1 \\\\\rA + \\neg A - 1 \u0026= 2^n - 2 \\\\\rA - 1 \u0026= 2^n - 1 - (\\neg A + 1) \\\\ \\neg (A - 1) \u0026= \\neg A + 1 \\\\\r\\neg (A - 1) \u0026= -A \\\\\r\\end{align*}\r$$\r也可以通过一补数和二补数，在时钟表上的对称轴偏差，来理解上述两种方式是等价的。 ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:2:1","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"加 / 减法器设计 ✅ 科普短片: See How Computers Add Numbers In One Lesson 了解晶体管的原理 了解基本逻辑门元件，例如 OR, AND 逻辑门的设计 了解加法器的原理和工作流程。 ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:2:2","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"阿贝尔群及对称性 技巧\r群论的最大用途是关于「对称性」的研究；所有具有对称性质，群论都可派上用场。只要发生变换后仍有什么东西还维持不变，那符合对称的性质。 一个圆左右翻转后还是圆，它在这种变换下是对称的，而这刚好与群的 封闭性 (Closure) 对应。 一个时钟的时刻，从 0 时刻开始，两边的时刻相加模 12 的结果均为 0，这与群的 单位元 (Identity element) 和 逆元 (Inverse element) 对应。 上述两个例子反映了群论的性质，对于对称性研究的重要性和原理依据。 ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:3:0","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"旁路攻击 ✅ 观看科普视频: 我听得到你打了什么字 阅读相关论文 Keyboard Acoustic Emanations 体验使用相关工具 kbd-audio ✅ 借由 Wikipedia 了解旁路攻击 (Side-channel attack) 和时序攻击 (Timing attack) 的基本概念。 Black-box testing Row hammer Cold boot attack Rubber-hose cryptanalysis 延伸阅读\rThe password guessing bug in Tenex Side Channel Attack By Using Hidden Markov Model One\u0026Done: A Single-Decryption EM-Based Attack on OpenSSL’s Constant-Time Blinded RSA ","date":"2023-12-31","objectID":"/sysprog/binary-representation/:4:0","tags":["LKI","Systerm","Binary"],"title":"解读计算机编码","uri":"/sysprog/binary-representation/"},{"categories":["LKI"],"content":"Rust in 100 Seconds ✅ 观看短片：Rust in 100 Seconds 了解 Rust，初步了解其安全性原理 所有权 (ownership) 借用 (borrow) 警告\r0:55 This is wrong, value mutability doesn’t have anything to do with the value being stored on the stack or the heap (and the example let mut hello = \"hi mom\" will be stored on the stack since it’s type is \u0026'static str), it depends on the type of the value (if it’s Sized or not).\r","date":"2023-12-28","objectID":"/lki/rust-intro/:1:0","tags":["LKI","Rust"],"title":"Rust - 进行中的未来","uri":"/lki/rust-intro/"},{"categories":["LKI"],"content":"The adoption of Rust in Business (2022) ❌ 阅读报告 The adoption of Rust in Business (2022)。 ","date":"2023-12-28","objectID":"/lki/rust-intro/:2:0","tags":["LKI","Rust"],"title":"Rust - 进行中的未来","uri":"/lki/rust-intro/"},{"categories":["Git"],"content":"教学影片：Git 中文教学 ","date":"2023-12-27","objectID":"/git/git-learn/:0:0","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"安装与设定 ✅ 观看影片 Git 教学系列 - 安装与配置，完成常用的 Git 设置。 设置 Git 的编辑器为 vim，主要用于 commit 时的编辑： $ git config --global core.editor vim 设置 Git 的合并解决冲突工具为 vimdiff： $ git config --global merge.tool vimdiff 启用 Git 命令行界面的颜色显示： $ git config --global color.ui true 设置常用命令的别名： $ git config --global alias.st status $ git config --global alias.ch checkout $ git config --global alias.rst reset HEAD 效果为：命令 git st 等价于 git status，其余的类似。 ","date":"2023-12-27","objectID":"/git/git-learn/:1:0","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Add 和 Commit ","date":"2023-12-27","objectID":"/git/git-learn/:2:0","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"指定 Commit ✅ 观看影片 Git 教学系列 - 指定 Commit，掌握 git log、git show、git diff 的常用方法。 只要 commit 了，资料基本不可能丢失，即使误操作了也是可以补救回来的（除非把 .git/ 文件夹也删除了）。\r","date":"2023-12-27","objectID":"/git/git-learn/:3:0","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Hash Value Every commit has a unique hash value. Calculate by SHA1 Hash value can indicate a commit absolutely. ","date":"2023-12-27","objectID":"/git/git-learn/:3:1","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Indicate Commit git manage references to commit HEAD Branch Tag Remote Also, We can indicate commit by ^, ~ 通俗地将，不论是 HEAD、Branch、Tag、Remote，其本质都是使用 Hash Value 进行索引的 commit，所以 ~ 和 ^ 也可以作用于它们。 可以通过 git log 来查看 commit 以及对应的 Hash 值。事实上，这个命令十分灵活，举个例子： git log 4a6ebc -n1 这个命令的效果是从 Hash 值为 4a6bc 的 commit 开始打印 1 条 commit 记录（没错，对应的是 -n1），因为 Git 十分聪明，所以 commit 对应的 Hash 值只需前 6 位即可（因为这样已经几乎不会发生 Hash 冲突）。 Examples\r打印 master 分支的最新一个 commit： git log master -n1 打印 master 分支的最新一个 commit（仅使用一行打印 commit 信息）： git log master -n1 --oneline 打印 HEAD 所指向的 commit： git log HEAD -n1 --oneline 打印 HEAD 所指向的 commit 的前一个 commit： git log HEAD^ -n1 --oneline ^ 可以持续使用，比如 HEAD^^ 表示 HEAD 所指向的 commit 的前两个 commit。当 ^ 数量过多时，可以使用 ~ 搭配数字来达到相同效果。例如： git log HEAD^^^^^ -n1 --oneline git log HEAD~5 -n1 --oneline 一般来说，使用 ^ 就已经足够了，几乎不会遇到使用 ~ 的场景，因为这种场景一般会去找图形化界面吧。🤣 打印与文件 README.md 相关的 commits（仅使用一行显示）： git log --oneline README.md 打印与文件 README.md 相关的 commits（显示详细信息，包括文件内容的增减统计）： git log --stat README.md 打印与文件 README.md 相关的 commits（显示详细信息，包括文件内容的增减细节）： git log --patch README.md 在打印的 commit 信息中抓取与 README 符合的信息（可以与 --stat 或 --patch 配合使用）： git log -S README ","date":"2023-12-27","objectID":"/git/git-learn/:3:2","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"View History git log \u003cpath\u003e|\u003ccommit\u003e -n: limit number --oneline: view hash and commit summary --stat: view files change --patch: view lines change -S or --grep: find modification ","date":"2023-12-27","objectID":"/git/git-learn/:3:3","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"View Commit git show \u003ccommit\u003e Equal to log -n1 ","date":"2023-12-27","objectID":"/git/git-learn/:3:4","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"See Difference 查看当前的修改，可以查看已经修改但没有 staged 文件的变化： git diff 查看当前的修改，可以查看已经修改且 staged 文件的变化： git diff --staged 查看当前与指定的 commit 的差异： git diff \u003ccommit\u003e # e.g. git diff master^ 查两个指定的 commit 之间的差异： git diff \u003ccommit\u003e \u003ccommit\u003e # e.g. git diff master^ master^^ ","date":"2023-12-27","objectID":"/git/git-learn/:3:5","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Path Add and Amend ✅ 观看影片 Git 教学系列 - Patch Add and Amend，掌握 git add -p、git checkout -p、git add ---amend 的用法，使用 add 和 checkout 时强烈建议使用 -p，掌握修改 commit 的两种方法。 ","date":"2023-12-27","objectID":"/git/git-learn/:4:0","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Only Add Related git add -p 推荐尽量使用这个 git add -p 而不是单纯的 git add。 使用 git add -p 后，Git 会帮我们把涉及的修改分成 section，然后我们就可以对每一个 section 涉及的修改进行 review，选择 y(yes) 表示采纳该 sction 对应的修改，选择 n(no) 表示不采纳。 如果觉得 section 切割的粒度太大了，可以选择 s(split) 来进行更细粒度的划分。如果这样仍然觉得粒度不够，可以选择 e(edit) 对 section 涉及的修改，进行以行为粒度的 review，具体操作可以查阅此时给出的提示。 还有一些其它的选项，比如 j、J、k、K，这些是类似 vim，用于切换进行 review 的 section，不太常用。q(quit) 表示退出。 由于可以针对一个文件的不同 section 进行 review，所以在进行 git add -p 之后，使用 git status 可以发现同一个文件会同时处于两种状态。 ","date":"2023-12-27","objectID":"/git/git-learn/:4:1","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Checkout Also git checkout -p 这个操作比较危险，因为这个操作的效果与 git add -p 相反，如果选择 y 的话，文件涉及的修改就会消失，如果涉及的修改没有 commit 的话，那么涉及的修改是无法救回的。但是怎么说，这个操作还是比直接使用 git checkout 稍微保险一点，因为会先进入 review 界面，而不是直接撤销修改。所以，请一定要使用 git checkout -p！ ","date":"2023-12-27","objectID":"/git/git-learn/:4:2","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Modify Commit 有两种方式来修改最新的 commit： # 1. Use git commit --amend git commit --amend # 2. Use reset HEAD^ then re-commit git reset HEAD^ git add -p git commit git commit --amend 并不是直接替换原有的 commit，而是创建了一个新的 commit 并重新设置了 HEAD 的指向。所以，新旧两个 commit 的 Hash Value 并不相同，事实上，如果你拥有旧 commit 的 Hash Value，是可以通过 git checkout \u003ccommit\u003e 切换到那个 commit 的。其原理如下图： 但是注意，git reset HEAD^ 是会撤销原先的 commit（仅限于本地 Git 存储库）。 ","date":"2023-12-27","objectID":"/git/git-learn/:4:3","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Branch and Merge ✅ 观看影片 Git 教学系列 - Branch and Merge，掌握 git add -p、git checkout -p、git add ---amend 的用法，使用 add 和 checkout 时强烈建议使用 -p，掌握修改 commit 的两种方法。 ","date":"2023-12-27","objectID":"/git/git-learn/:5:0","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Move and Create Branch Checkout: move HEAD git checkout \u003ccommit\u003e: Move HEAD to commit git checkout \u003cpath\u003e: WARNING: discard change 可以将路径上的文件复原到之前 commit 的状态。 Branch: git branch: List branch git branch \u003cname\u003e: Create branch Or just: git checkout -b Examples\r修改一个文件并恢复： # modify file load.cpp git status git checkout load.cpp git status 删除一个文件并恢复： rm load.cpp git status git checkout load.cpp git status 正如上一节所说的，git checkout 尽量带上 -p 参数，因为如果一不小心输入了 git checkout .，那就前功尽弃了。 显示分支： # only show name git branch # show more infomation git branch -v 切换分支： # switch to branch 'main' git checkout main 创建分支： # 1. using `git branch` git branch cload # 2. using `git checkout -b` git checkout -b asmload 切换到任一 commit： git checkout \u003ccommit\u003e 直接 checkout 到任一 commit 会有警告，这是因为，当你以该 commit 为基点进行一系列的 commit，这些新的 commit 会在你切换分支后消失，因为没有 branch 来引用它们。之前可以被引用是因为 HEAD 引用，切换分支后 HEAD 不再引用这些 commit，所以就会消失。在这种情况，Git 会在发出警告的同时建议我们使用 git branch 来创建分支进行引用。 ","date":"2023-12-27","objectID":"/git/git-learn/:5:1","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"View Branch 列出仓库的所有分支： git branch 也可以通过 log 来查看分支： git log --decorate: 在 log 的首行显示所有的 references（可能需要通过 git config log.decorate auto 来开启） --graph: 以图形化的方式显示 branch 的关系（主要是 commit 的引用） ","date":"2023-12-27","objectID":"/git/git-learn/:5:2","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Delete Branch 删除分支： git branch -d \u003cname\u003e 对于有没有 merge 的 commit 的分支，Git 会警告，需要使用 -D 来强制删除： git branch -D \u003cname\u003e for no-merge commit WARNING: Discard Commit Git 会发出警告的原因同样是 no-merge commit 在删除分支后就无法被引用，所以会发出警告。 ","date":"2023-12-27","objectID":"/git/git-learn/:5:3","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Merge 合并分支。默认使用 fast-forward，即如果没有冲突，直接将要合并的分支提前到被合并分支的 commit 处，而不会另外生成一个 merge commit。但这样会使得被合并的分支在合并后，没有历史痕迹。可以通过 --no-ff (no fast forward) 来强制生成 merge commit。推荐使用 merge 时加上 --no-ff 这个参数。 git merge \u003cbranch\u003e 通常是 main/master 这类主分支合并其它分支： git checkout main/master git merge \u003cbranch\u003e ","date":"2023-12-27","objectID":"/git/git-learn/:5:4","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Resolve Conflict Manually resolve: Check every codes between \u003c\u003c\u003c\u003c\u003c\u003c\u003c, \u003e\u003e\u003e\u003e\u003e\u003e\u003e Edit code to what it should be Use mergetool like vimdiff: It shows: local, base, remote, file to be edited Edit “file ro be edited” to what is should be Add and Commit # 1.合并分支 git merge \u003cbranch\u003e # 2.检查状态，查看 unmerged 的文件 git status # 3.编辑 unmerged 文件，编辑冲突区域代码即可 vim \u003cfile\u003e # 4.添加解决完冲突的文件 git add \u003cfile\u003e # 5.进行 merge commit git commit 冲突区域就是 \u003c\u003c\u003c\u003c\u003c\u003c\u003c 和 \u003e\u003e\u003e\u003e\u003e\u003e\u003e 内的区域，在 merge 操作后，Git 已经帮我们把 unmerged 文件修改为待解决冲突的状态，直接编辑文件即可。在编辑完成后，需要手动进行 add 和 commit，此次 commit 的信息 Git 已经帮我们写好了，一般不需要修改。\r如果使用的是 mergetool，以 vimdiff 为例，只需将第 3 步的 vim \u003cfile\u003e 改为 git mergetool 即可。vimdiff 会提供 4 个视窗：底部视窗是我们的编辑区，顶部左边是当前合并分支的状态，顶部中间是 base (合并分支和被合并的共同父节点) 的状态，顶部右边是 remote 的状态，按需要选择、编辑。 vimdiff 在编辑完后会保留 *.orig 的文件，这个文件是待解决冲突的文件副本。 ","date":"2023-12-27","objectID":"/git/git-learn/:5:5","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Git"],"content":"Merge Conflict Prevent very long development branch. Split source code clearly. ","date":"2023-12-27","objectID":"/git/git-learn/:5:6","tags":["Git"],"title":"Git 学习记录","uri":"/git/git-learn/"},{"categories":["Linux"],"content":"Ubuntu 网络和输入法 ","date":"2023-12-27","objectID":"/ubuntu/:0:0","tags":["Linux","Ubuntu"],"title":"Ubuntu 22.04 配置","uri":"/ubuntu/"},{"categories":["Linux"],"content":"网络代理 根据项目 clash-for-linux-backup 来配置 Ubuntu 的网络代理。 $ git clone https://github.com/Elegybackup/clash-for-linux-backup.git clash-for-linux 过程当中可能需要安装 curl 和 net-tools，根据提示进行安装即可： sudo apt install curl sudo apt install net-tools 安装并启动完成后，可以通过 localhost:9090/ui 来访问 Dashboard。 启动代理： $ cd clash-for-linux $ sudo bash start.sh $ source /etc/profile.d/clash.sh $ proxy_on 关闭代理： $ cd clash-for-linux $ sudo bash shutdown.sh $ proxy_off ","date":"2023-12-27","objectID":"/ubuntu/:1:0","tags":["Linux","Ubuntu"],"title":"Ubuntu 22.04 配置","uri":"/ubuntu/"},{"categories":["Linux"],"content":"搜狗输入法 根据 搜狗输入法 Linux 安装指导 来安装搜狗输入法。 无需卸载系统 ibus 输入法框架。 通过 Ctrl + space 唤醒搜狗输入法。 ","date":"2023-12-27","objectID":"/ubuntu/:2:0","tags":["Linux","Ubuntu"],"title":"Ubuntu 22.04 配置","uri":"/ubuntu/"},{"categories":["Mathematics"],"content":" 中大數學系開放式課程 台大齐震宇 - 数学潜水艇、微积分、分析 台大谢铭伦 - 线性代数 ","date":"2023-12-23","objectID":"/math/math/:0:0","tags":["Mathematics","Math"],"title":"数学开放式课程学习导航","uri":"/math/math/"},{"categories":["draft"],"content":"博客（英语：Blog）是一种在线日记型式的个人网站，借由张帖子章、图片或视频来记录生活、抒发情感或分享信息。博客上的文章通常根据张贴时间，以倒序方式由新到旧排列。 ","date":"2023-12-23","objectID":"/first_post/:0:0","tags":["draft"],"title":"Hello, World!","uri":"/first_post/"},{"categories":["draft"],"content":"数学公式 行内公式：$N(b,d)=(b-1)M$ 公式块： $$\r\\int_{a}^{b}x(t)dt =\r\\dfrac{b - a}{N} \\\\\r=\\sum_{k=1}^{N}x(t_k)\\cdot\\dfrac{b-a}{N}\r$$\r$$\r\\begin{aligned}\r\\int_{a}^{b}x(t)dt \u0026=\r\\dfrac{b - a}{N} \\\\\r\u0026=\\sum_{k=1}^{N}x(t_k)\\cdot\\dfrac{b-a}{N} \\\\\r\\end{aligned}\r$$\r$$\r\\mathrm{Integrals\\ are\\ numerically\\ approximated\\ as\\ finite\\ series}:\\\\ \\begin{split}\r\\int_{a}^{b}x(t)dt \u0026=\r\\dfrac{b - a}{N} \\\\\r\u0026=\\sum_{k=1}^{N}x(t_k)\\cdot\\dfrac{b-a}{N}\r\\end{split} \\\\ where\\ t_k = a + (b-a)\\cdot k/N\r$$\r$$\r\\begin{align*}\rp(x) = 3x^6 + 14x^5y \u0026+ 590x^4y^2 + 19x^3y^3 \\\\\r\u0026- 12x^2y^4 - 12xy^5 + 2y^6 - a^3b^3 - a^2b - ab + c^5d^3 + c^4d^3 - cd\r\\end{align*}\r$$\r","date":"2023-12-23","objectID":"/first_post/:1:0","tags":["draft"],"title":"Hello, World!","uri":"/first_post/"},{"categories":["draft"],"content":"代码块 let i: i32 = 13; let v = vec![1, 2, 3, 4, 5, 65]; for x in v.iter() { println!(\"{}\", x); } typedef struct Block_t { int head; int data; } Block_t; ","date":"2023-12-23","objectID":"/first_post/:2:0","tags":["draft"],"title":"Hello, World!","uri":"/first_post/"},{"categories":["draft"],"content":"Admonition 注意\r一个 注意 横幅\r摘要\r一个 摘要 横幅\r信息\r一个 信息 横幅\r技巧\r一个 技巧 横幅\r成功\r一个 成功 横幅\r问题\r一个 问题 横幅\r警告\r一个 警告 横幅\r失败\r一个 失败 横幅\r危险\r一个 危险 横幅\rBug\r一个 Bug 横幅\r示例\r一个 示例 横幅\r引用\r一个 引用 横幅\r","date":"2023-12-23","objectID":"/first_post/:3:0","tags":["draft"],"title":"Hello, World!","uri":"/first_post/"},{"categories":["draft"],"content":"References FixIt 快速上手 使用 Hugo + Github 搭建个人博客 Emoji 支持 扩展 Shortcodes 概述 URL management ","date":"2023-12-23","objectID":"/first_post/:4:0","tags":["draft"],"title":"Hello, World!","uri":"/first_post/"}]